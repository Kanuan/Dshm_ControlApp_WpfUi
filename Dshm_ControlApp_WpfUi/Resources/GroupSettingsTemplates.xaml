<ResourceDictionary
					xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
					xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
					xmlns:system="clr-namespace:System;assembly=mscorlib"
					xmlns:devmvvm="clr-namespace:Nefarius.DsHidMini.ControlApp.MVVM"
					xmlns:ui="http://schemas.lepo.co/wpfui/2022/xaml"
					xmlns:wpf="clr-namespace:Nefarius.DsHidMini.ControlApp.Util.WPF">
    <!-- Add Resources Here -->
	<!-- LED Group  DataContext="{Binding $parent[DockPanel].DataContext}" Settings  -->
    <wpf:VisibilityPerHidModeConverter x:Key="VisibilityPerHIDModeConverterKey"/>
    <DataTemplate x:Key="Template_LEDsSettings" DataType="{x:Type devmvvm:GroupLEDsCustomsVM}">
		<ContentControl>
			<Grid>
				<Grid.RowDefinitions>
					<RowDefinition/>
					<RowDefinition/>
					<RowDefinition/>
				</Grid.RowDefinitions>
				<Grid.ColumnDefinitions>
					<ColumnDefinition/>
					<ColumnDefinition/>
				</Grid.ColumnDefinitions>
				<!-- LEDs mode selection -->
				<Label
					Content="LEDs mode:"
					Grid.Row="0"
					VerticalAlignment="Center"
				/>
				<ComboBox
					x:Name="LEDModeComboBox"
					VerticalAlignment="Center"
					Grid.Row="0" Grid.Column="1"
					SelectedIndex="{Binding LEDMode}">
					<ComboBoxItem Content="Battery level (single led)"/>
					<ComboBoxItem Content="Battery level (filling bar)"/>
					<ComboBoxItem Content="Custom (simple)"/>
					<ComboBoxItem Content="Custom (advanced)"/>
				</ComboBox>

				<TabControl Grid.Row="1" Grid.ColumnSpan="2" HorizontalAlignment="Stretch" SelectedIndex="{Binding SelectedIndex, ElementName=LEDModeComboBox}">
					<!-- Index 0: LEDs as battery - single led -->
					<TabItem Visibility="Hidden" />
					<!-- Index 1: LEDs as battery - filling bar -->
					<TabItem Visibility="Hidden" />
					<!-- Index 2: LEDs custom simple -->
					<TabItem Visibility="Hidden" VerticalContentAlignment="Center" Width="50">
						<ContentControl MaxWidth="120">
                            <UniformGrid Columns="4">
                                <CheckBox IsChecked="{Binding Leds_VM[0].IsEnabled}"/>
                                <CheckBox IsChecked="{Binding Leds_VM[1].IsEnabled}"/>
                                <CheckBox IsChecked="{Binding Leds_VM[2].IsEnabled}"/>
                                <CheckBox IsChecked="{Binding Leds_VM[3].IsEnabled}"/>
							</UniformGrid>
						</ContentControl>
						<!-- Index 3: LEDs custom advanced -->
					</TabItem>
					<TabItem Visibility="Hidden">
						<StackPanel>
							<!-- Select LED to customize -->
							<TabControl
								HorizontalAlignment="Center"
								SelectedIndex="{Binding CurrentLEDCustomsIndex}">
								<TabItem Header="1" Width="50"/>
                                <TabItem Header="2" Width="50"/>
                                <TabItem Header="3" Width="50"/>
                                <TabItem Header="4" Width="50"/>
							</TabControl>
							<!-- LED fine tuning -->
							<DockPanel DataContext="{Binding SelectedLED_VM}">
								<ui:ToggleSwitch
									DockPanel.Dock="Top"
									Content="Enable LED"
									IsChecked="{Binding IsEnabled}"/>
								<ui:ToggleSwitch
									x:Name="UseLEDEffects_Checkbox"
									DockPanel.Dock="Top"
									Content="Use advanced effects"
									IsChecked="{Binding UseEffects}"/>
								<Grid
									DockPanel.Dock="Top"
									IsEnabled="{Binding IsChecked, ElementName=UseLEDEffects_Checkbox}"
										>
									<Grid.RowDefinitions>
										<RowDefinition/>
										<RowDefinition/>
										<RowDefinition/>
										<RowDefinition/>
									</Grid.RowDefinitions>
									<Grid.ColumnDefinitions>
										<ColumnDefinition/>
										<ColumnDefinition Width="3*"/>
                                        <ColumnDefinition/>
									</Grid.ColumnDefinitions>
									<TextBlock
										Grid.Row="0" Grid.Column="0"
										Text="Duration:"
										TextWrapping="Wrap"
										HorizontalAlignment="Left"
										VerticalAlignment="Center"/>
									<Slider
										Grid.Row="0" Grid.Column="1"
										Minimum="0"
										Maximum="255"
										VerticalAlignment="Center"
										Value="{Binding Duration}"/>
                                    <TextBlock
                                        Grid.Row="0"
                                        Grid.Column="2"
                                        Text="{Binding Duration}"/>
                                    <TextBlock
										Grid.Row="1" Grid.Column="0"
										Text="Interval duration:"
										TextWrapping="Wrap"
										HorizontalAlignment="Left"
										VerticalAlignment="Center"/>
                                    <Slider
										Grid.Row="1" Grid.Column="1"
										Minimum="0"
										Maximum="255"
										ClipToBounds="True"
										VerticalAlignment="Center"
										Value="{Binding IntervalDuration}"
						/>
                                    <TextBlock
                                        Grid.Row="1"
                                        Grid.Column="2"
                                        Text="{Binding IntervalDuration}"/>
                                    <TextBlock
										Grid.Row="2" Grid.Column="0"
										Text="Interval ON portion:"
										TextWrapping="Wrap"
										HorizontalAlignment="Left"
										VerticalAlignment="Center"/>
									<ui:NumberBox
										Grid.Row="2" Grid.Column="1"
										Minimum="0"
										Maximum="254"
										ClipToBounds="True"
                                        ToolTip="{Binding Value, RelativeSource={RelativeSource Self}}"
										VerticalAlignment="Center"
										Value="{Binding IntervalPortionON}"
						/>
                                    <TextBlock
                                        Grid.Row="2"
                                        Grid.Column="2"
                                        Text="{Binding IntervalPortionON}"/>
                                    <TextBlock
										Grid.Row="3" Grid.Column="0"
										Text="Interval OFF portion:"
										TextWrapping="Wrap"
										HorizontalAlignment="Left"
										VerticalAlignment="Center"/>
									<Slider
										Grid.Row="3" Grid.Column="1"
										Minimum="0"
										Maximum="254"
										ClipToBounds="True"
										VerticalAlignment="Center"
										Value="{Binding IntervalPortionOFF}"
						/>
                                    <TextBlock
                                        Grid.Row="3"
                                        Grid.Column="2"
                                        Text="{Binding IntervalPortionOFF}"/>
                                </Grid>
							</DockPanel>
						</StackPanel>
					</TabItem>
				</TabControl>
			</Grid>
		</ContentControl>


	</DataTemplate>

	<!-- Basic wireless settings -->
	<DataTemplate x:Key="Template_WirelessSettings">
		<DockPanel>
			<!-- Idle disconnect -->
			<ui:ToggleSwitch
				x:Name="IdleDisconnectEnableCheckbox"
				DockPanel.Dock="Top"
				Content="Disconnect the controller after idle period"
				IsChecked="{Binding IsWirelessIdleDisconnectEnabled}"/>
			<DockPanel DockPanel.Dock="Top">
				<Label
					DockPanel.Dock="Left"
					Content="Idle disconnect period:"
					VerticalAlignment="Center"/>
				<Slider
					Value="{Binding WirelessIdleDisconnectTime}"
					DockPanel.Dock="Right"
					IsEnabled="{Binding IsChecked, ElementName=IdleDisconnectEnableCheckbox}"
					IsSnapToTickEnabled="True"
					TickFrequency="1"
					Minimum="0"
					Maximum="60"
					/>
			</DockPanel>
			<ui:ToggleSwitch
				x:Name="EnableQuickDisconnectComboCheckbox"
				DockPanel.Dock="Top"
				Content="Enable quick disconnect combo"
				IsChecked="{Binding IsQuickDisconnectComboEnabled}"/>
			<!-- Quick disconnect combo selection -->
			<DockPanel
				DockPanel.Dock="Top"
					>
				<!-- DataContext="{Binding QuickDisconnectCombo}" -->
				<Label
				DockPanel.Dock="Left"
				Content="Quick disconnect combo (3s):"
				VerticalAlignment="Center"/>
				<!-- Change ComboBox later so it's binding to a enum -->
				<ComboBox
					Width="80"
					DockPanel.Dock="Left"
					ItemsSource="{Binding Source={wpf:EnumBindingSource {x:Type devmvvm:ControlApp_ComboButtons}}}"
					SelectedItem="{Binding QuickDisconnectComboButton1}"
					IsEnabled="{Binding IsChecked,ElementName=EnableQuickDisconnectComboCheckbox}"
						/>
				<ComboBox
					Width="80"
					DockPanel.Dock="Left"
					ItemsSource="{Binding Source={wpf:EnumBindingSource {x:Type devmvvm:ControlApp_ComboButtons}}}"
					SelectedItem="{Binding QuickDisconnectComboButton2}"
					IsEnabled="{Binding IsChecked,ElementName=EnableQuickDisconnectComboCheckbox}"
						/>
				<ComboBox
					Width="80"
					DockPanel.Dock="Left"
					ItemsSource="{Binding Source={wpf:EnumBindingSource {x:Type devmvvm:ControlApp_ComboButtons}}}"
					SelectedItem="{Binding QuickDisconnectComboButton3}"
					IsEnabled="{Binding IsChecked,ElementName=EnableQuickDisconnectComboCheckbox}"
						/>
			</DockPanel>
		</DockPanel>
	</DataTemplate>

	<!-- Template draft -->
	<DataTemplate x:Key="Template_ToDo">
		<Grid>
			<Grid.ColumnDefinitions>
				<ColumnDefinition/>
				<ColumnDefinition/>
			</Grid.ColumnDefinitions>
			<Grid.RowDefinitions>
				<RowDefinition/>
				<RowDefinition/>
			</Grid.RowDefinitions>
			<Label Content="Fill 1" VerticalAlignment="Center" Grid.Row="0" Grid.Column="0"/>
			<Label Content="Fill 2" VerticalAlignment="Center" Grid.Row="1" Grid.Column="0"/>
		</Grid>
	</DataTemplate>

	<!-- Template: sticks deadzone -->
	<DataTemplate x:Key="Template_SticksDeadZone">
		<DockPanel>
			<!-- Grid test -->
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="4*"/>
                    <ColumnDefinition Width="2*"/>
                    <ColumnDefinition Width="2*"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition/>
                    <RowDefinition/>
                    <RowDefinition/>
                    <RowDefinition/>
                    <RowDefinition/>
                </Grid.RowDefinitions>
                <!-- Row 0: Labels -->
                <Label
					Grid.Row="0" Grid.Column="1"
					Content="Left Stick"
					VerticalContentAlignment="Center"
					HorizontalContentAlignment="Center"
						/>
                <Label
					Grid.Row="0" Grid.Column="2"
					Content="Right Stick"
					VerticalContentAlignment="Center"
					HorizontalContentAlignment="Center"
						/>
                <!-- Row 1: DeadZone -->
                <Label
					Grid.Row="1" Grid.Column="0"
					Content="DeadZone (%):"
					VerticalContentAlignment="Center"
					HorizontalContentAlignment="Left"
						/>
                <ui:NumberBox
					Grid.Row="1" Grid.Column="1"
					Minimum="0" Maximum="142" ClipToBounds="True"
					Value="{Binding LeftStickDeadZone}"
					/>
                <ui:NumberBox
					Grid.Row="1" Grid.Column="2"
					Minimum="0" Maximum="142" ClipToBounds="True"
					Value="{Binding RightStickDeadZone}"
					/>
                <!-- Row 2: Invert X -->
                <Label
					Grid.Row="2" Grid.Column="0"
					Content="Invert horizontally (X-Axis):"
					VerticalContentAlignment="Center"
					HorizontalContentAlignment="Left"
						/>
                <ui:ToggleSwitch
					Grid.Row="2" Grid.Column="1"
					IsChecked="{Binding InvertLSX}"
					HorizontalAlignment="Center"
						/>
                <ui:ToggleSwitch
					Grid.Row="2" Grid.Column="2"
					IsChecked="{Binding InvertRSX}"
					HorizontalAlignment="Center"
						/>
                <!-- Row 3: Invert Y -->
                <Label
					Grid.Row="3" Grid.Column="0"
					Content="Invert vertically (Y-Axis):"
					VerticalContentAlignment="Center"
					HorizontalContentAlignment="Left"
						/>
                <ui:ToggleSwitch
					Grid.Row="3" Grid.Column="1"
					IsChecked="{Binding InvertLSY}"
					HorizontalAlignment="Center"
						/>
                <ui:ToggleSwitch
					Grid.Row="3" Grid.Column="2"
					IsChecked="{Binding InvertRSY}"
					HorizontalAlignment="Center"
						/>
            </Grid>
        </DockPanel>
	</DataTemplate>

	<!-- Rumble template -->
	<DataTemplate x:Key="Template_RumbleBasicFunctions">
		<DockPanel>
			<!-- Variable light rumble emulationg enabler -->
            <ui:ToggleSwitch
				DockPanel.Dock="Top"
				IsChecked="{Binding IsVariableLightRumbleEmulationEnabled}">
                <TextBlock Text="Start with variable right rumble emulation enabled" TextWrapping="Wrap"/>
            </ui:ToggleSwitch>
            <ui:ToggleSwitch
				x:Name="EnableQuickDisconnectComboCheckbox"
				DockPanel.Dock="Top"
				Content="Toggle variable right rumble emulation via button combo"
				IsChecked="{Binding IsVariableRightEmulToggleComboEnabled}"/>
            <DockPanel
				DockPanel.Dock="Top"
					>
				<!-- DataContext="{Binding VariableRightEmulToggleCombo}" -->
				<Label
				DockPanel.Dock="Left"
				Content="Toogle combo (3s):"
				VerticalAlignment="Center"/>
				<!-- Change ComboBox later so it's binding to a enum -->
				<ComboBox
					Width="80"
					DockPanel.Dock="Left"
					ItemsSource="{Binding Source={wpf:EnumBindingSource {x:Type devmvvm:ControlApp_ComboButtons}}}"
					SelectedItem="{Binding VarRightEmul_ToggleComboButton1}"
					IsEnabled="{Binding IsChecked,ElementName=EnableQuickDisconnectComboCheckbox}"
						/>
				<ComboBox
					Width="80"
					DockPanel.Dock="Left"
					ItemsSource="{Binding Source={wpf:EnumBindingSource {x:Type devmvvm:ControlApp_ComboButtons}}}"
					SelectedItem="{Binding VarRightEmul_ToggleComboButton2}"
					IsEnabled="{Binding IsChecked,ElementName=EnableQuickDisconnectComboCheckbox}"
						/>
				<ComboBox
					Width="80"
					DockPanel.Dock="Left"
					ItemsSource="{Binding Source={wpf:EnumBindingSource {x:Type devmvvm:ControlApp_ComboButtons}}}"
					SelectedItem="{Binding VarRightEmul_ToggleComboButton3}"
					IsEnabled="{Binding IsChecked,ElementName=EnableQuickDisconnectComboCheckbox}"
						/>
			</DockPanel>
			<!-- Rumble motors disablers -->
			<ui:ToggleSwitch
				DockPanel.Dock="Top"
				Content="Disable left motor (heavy)"
				IsChecked="{Binding IsLeftMotorDisabled}"/>
			<ui:ToggleSwitch
				DockPanel.Dock="Top"
				Content="Disable right motor (small)"
				IsChecked="{Binding IsRightMotorDisabled}"/>
		</DockPanel>
	</DataTemplate>

	<!-- Template: rumble heavy strength rescale -->
	<DataTemplate x:Key="Template_RumbleHeavyStrRescale">
		<DockPanel>
			<!-- Left motor str rescaling ui:ToggleSwitch -->
			<ui:ToggleSwitch
				DockPanel.Dock="Top"
				Content="Enable rescaling of left motor strength"
				IsChecked="{Binding IsLeftMotorStrRescalingEnabled}"/>
			<!-- Upper range controls -->
			<DockPanel DockPanel.Dock="Top">
				<TextBlock
					DockPanel.Dock="Left"
					Text="New upper range:"
					HorizontalAlignment="Left"
					VerticalAlignment="Center"/>
				<Slider
					DockPanel.Dock="Right"
					IsSnapToTickEnabled="True"
					TickFrequency="1"
					Minimum="2"
					Maximum="255"
					Value="{Binding LeftMotorStrRescalingUpperRange}"/>
			</DockPanel>
			<!-- lower range controls -->
			<DockPanel DockPanel.Dock="Top">
				<TextBlock
					Text="New lower range:"
					HorizontalAlignment="Left"
					VerticalAlignment="Center"
					DockPanel.Dock="Left"/>
				<Slider
					DockPanel.Dock="Right"
					IsSnapToTickEnabled="True"
					TickFrequency="1"
					Minimum="1"
					Maximum="254"
					Value="{Binding LeftMotorStrRescalingLowerRange}"/>
			</DockPanel>
		</DockPanel>
	</DataTemplate>

	<!-- Template: variable light rumble emulation tuning -->
	<DataTemplate x:Key="Template_RumbleVariableLightEmuTuning">
		<DockPanel>
			<!-- Conversion upper range -->
			<DockPanel DockPanel.Dock="Top">
				<TextBlock
					DockPanel.Dock="Left"
					Text="Conversion upper range:"
					TextWrapping="Wrap"
					HorizontalAlignment="Left"
					VerticalAlignment="Center"/>
				<Slider
					DockPanel.Dock="Right"
					IsSnapToTickEnabled="True"
					TickFrequency="1"
					Minimum="2"
					Maximum="255"
					Value="{Binding RightRumbleConversionUpperRange}"/>
			</DockPanel>
			<!-- Conversion lower range -->
			<DockPanel DockPanel.Dock="Top">
				<TextBlock
					DockPanel.Dock="Left"
					Text="Conversion lower range:"
					TextWrapping="Wrap"
					HorizontalAlignment="Left"
					VerticalAlignment="Center"/>
				<Slider
					DockPanel.Dock="Right"
					IsSnapToTickEnabled="True"
					TickFrequency="1"
					Minimum="1"
					Maximum="254"
					Value="{Binding RightRumbleConversionLowerRange}"/>
			</DockPanel>
			<TextBlock
				DockPanel.Dock="Top"
				Text="Force activate right motor when above..."
				TextWrapping="Wrap"
				HorizontalAlignment="Left"
				VerticalAlignment="Center"/>
			<!-- Forced right motor activation / light rumble threshold -->
			<DockPanel DockPanel.Dock="Top">
				<ui:ToggleSwitch
					x:Name="ForcedRMLeftThresholdCheckbox"
					DockPanel.Dock="Left"
					Content="Left rumble threshold:"
					IsChecked="{Binding IsForcedRightMotorHeavyThreasholdEnabled}"/>
				<Slider
					IsEnabled="{Binding IsChecked, ElementName=ForcedRMLeftThresholdCheckbox}"
					DockPanel.Dock="Right"
					IsSnapToTickEnabled="True"
					TickFrequency="1"
					Minimum="1"
					Maximum="255"
					Value="{Binding ForcedRightMotorHeavyThreshold}"/>
			</DockPanel>
			<!-- Forced right motor activation / heavy rumble threshold -->
			<DockPanel DockPanel.Dock="Top">
				<ui:ToggleSwitch
					x:Name="ForcedRMRightThresholdCheckbox"
					DockPanel.Dock="Left"
					Content="Right rumble threshold:"
					IsChecked="{Binding IsForcedRightMotorLightThresholdEnabled}"/>
				<Slider
					IsEnabled="{Binding IsChecked, ElementName=ForcedRMRightThresholdCheckbox}"
					DockPanel.Dock="Right"
					IsSnapToTickEnabled="True"
					TickFrequency="1"
					Minimum="1"
					Maximum="255"
					Value="{Binding ForcedRightMotorLightThreshold}"/>
			</DockPanel>
			<DockPanel DockPanel.Dock="Top">

			</DockPanel>
		</DockPanel>
	</DataTemplate>

	<!-- Template: Mode_Unique_All -->
	<DataTemplate x:Key="Template_Unique_All">
		<StackPanel>
			<DockPanel>
				<TextBlock
					DockPanel.Dock="Left"
					Text="HID Device Mode:"
					HorizontalAlignment="Left"
					VerticalAlignment="Center"/>
				<ComboBox
					DockPanel.Dock="Right"
					VerticalAlignment="Center"
					SelectedItem="{Binding Context, FallbackValue=4}"
					ItemsSource="{Binding HIDDeviceModesList}"/>
			</DockPanel>
			<DockPanel DockPanel.Dock="Top">
				<ui:ToggleSwitch
					DockPanel.Dock="Left"
					Visibility="{Binding Path=Context, Converter={StaticResource VisibilityPerHIDModeConverterKey}, ConverterParameter=100}"
					Content="Allow apps to control LEDs (e.g.: RPCS3)"
					IsChecked="{Binding AllowAppsToControlLEDsInSXSMode}"
					VerticalContentAlignment="Center"
						/>
				<ui:ToggleSwitch
					DockPanel.Dock="Right"
					Visibility="{Binding Path=Context, Converter={StaticResource VisibilityPerHIDModeConverterKey}, ConverterParameter=1000}"
					Content="Enable DS4 Lightbar Translation"
					IsChecked="{Binding IsDS4LightbarTranslationEnabled}"
					VerticalContentAlignment="Center"
						/>
			</DockPanel>
			<!-- Pressure buttons mode -->
			<DockPanel Visibility="{Binding Path=Context, Converter={StaticResource VisibilityPerHIDModeConverterKey}, ConverterParameter=11}">
				<TextBlock
					DockPanel.Dock="Left"
					Text="Pressure buttons mode:"
					HorizontalAlignment="Left"
					VerticalAlignment="Center"/>
				<ComboBox
					DockPanel.Dock="Right"
					VerticalAlignment="Center"
					SelectedItem="{Binding PressureExposureMode, FallbackValue=2}"
					ItemsSource="{Binding ListOfPressureModes}"/>
			</DockPanel>
			<!-- DPAD modes -->
			<DockPanel Visibility="{Binding Path=Context, Converter={StaticResource VisibilityPerHIDModeConverterKey}, ConverterParameter=11}">
				<TextBlock
					DockPanel.Dock="Left"
					Text="Expose D-Pad as:"
					HorizontalAlignment="Left"
					VerticalAlignment="Center"/>
				<ComboBox
					DockPanel.Dock="Right"
					VerticalAlignment="Center"
					SelectedItem="{Binding DPadExposureMode, FallbackValue=0}"
					ItemsSource="{Binding ListOfDPadModes}"/>
			</DockPanel>
		</StackPanel>
	</DataTemplate>

	<!-- Template: Output Rate Control -->
	<DataTemplate x:Key="Template_OutputRateControl">
		<DockPanel>
			<!-- Output rate enabler -->
			<ui:ToggleSwitch
				DockPanel.Dock="Top"
				Content="Limit maximum output rate when wireless"
				IsChecked="{Binding IsOutputReportRateControlEnabled}"/>
			<!-- Max output rate adjuster -->
			<DockPanel DockPanel.Dock="Top">
				<TextBlock
					DockPanel.Dock="Left"
					Text="Max output rate:"
					HorizontalAlignment="Left"
					VerticalAlignment="Center"/>
				<Slider
					DockPanel.Dock="Right"
					IsSnapToTickEnabled="True"
					TickFrequency="1"
					Minimum="1"
					Maximum="255"
					Value="{Binding MaxOutputRate}"/>
			</DockPanel>
			<!-- Output report detuplicator -->
			<ui:ToggleSwitch
				DockPanel.Dock="Top"
				Content="Enable output report deduplicator"
				IsChecked="{Binding IsOutputReportDeduplicatorEnabled}"/>
		</DockPanel>
	</DataTemplate>



</ResourceDictionary>
