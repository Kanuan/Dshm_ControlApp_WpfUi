<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:devmvvm="clr-namespace:Nefarius.DsHidMini.ControlApp.MVVM"
    xmlns:helpers="clr-namespace:Nefarius.DsHidMini.ControlApp.Helpers.WPF"
    xmlns:system="clr-namespace:System;assembly=mscorlib"
    xmlns:ui="http://schemas.lepo.co/wpfui/2022/xaml"
    xmlns:wpf="clr-namespace:Nefarius.DsHidMini.ControlApp.Util.WPF">
    <!--  Add Resources Here  -->
    <!--  LED Group  DataContext="{Binding $parent[DockPanel].DataContext}" Settings  -->
    <wpf:VisibilityPerHidModeConverter x:Key="VisibilityPerHIDModeConverterKey" />
    <helpers:BooleanToVisibilityConverter
        x:Key="BoolToVisConverter_TCollapsed_FVisible"
        False="Visible"
        True="Collapsed" />
    <BooleanToVisibilityConverter x:Key="BoolToVis" />
    <DataTemplate x:Key="Template_LEDsSettings" DataType="{x:Type devmvvm:GroupLEDsCustomsVM}">
        <ContentControl>
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition />
                    <RowDefinition />
                    <RowDefinition />
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition />
                    <ColumnDefinition />
                </Grid.ColumnDefinitions>
                <!--  LEDs mode selection  -->
                <Label
                    Grid.Row="0"
                    VerticalAlignment="Center"
                    Content="LEDs mode:" />
                <ComboBox
                    x:Name="LEDModeComboBox"
                    Grid.Row="0"
                    Grid.Column="1"
                    VerticalAlignment="Center"
                    SelectedIndex="{Binding LEDMode}">
                    <ComboBoxItem Content="Battery level (single led)" />
                    <ComboBoxItem Content="Battery level (filling bar)" />
                    <ComboBoxItem Content="Custom (simple)" />
                    <ComboBoxItem Content="Custom (advanced)" />
                </ComboBox>

                <TabControl
                    Grid.Row="1"
                    Grid.ColumnSpan="2"
                    HorizontalAlignment="Stretch"
                    SelectedIndex="{Binding SelectedIndex, ElementName=LEDModeComboBox}">
                    <!--  Index 0: LEDs as battery - single led  -->
                    <TabItem Visibility="Hidden" />
                    <!--  Index 1: LEDs as battery - filling bar  -->
                    <TabItem Visibility="Hidden" />
                    <!--  Index 2: LEDs custom simple  -->
                    <TabItem
                        Width="50"
                        VerticalContentAlignment="Center"
                        Visibility="Hidden">
                        <ContentControl MaxWidth="120">
                            <UniformGrid Columns="4">
                                <CheckBox IsChecked="{Binding Leds_VM[0].IsEnabled}" />
                                <CheckBox IsChecked="{Binding Leds_VM[1].IsEnabled}" />
                                <CheckBox IsChecked="{Binding Leds_VM[2].IsEnabled}" />
                                <CheckBox IsChecked="{Binding Leds_VM[3].IsEnabled}" />
                            </UniformGrid>
                        </ContentControl>
                        <!--  Index 3: LEDs custom advanced  -->
                    </TabItem>
                    <TabItem Visibility="Hidden">
                        <StackPanel>
                            <!--  Select LED to customize  -->
                            <TabControl HorizontalAlignment="Center" SelectedIndex="{Binding CurrentLEDCustomsIndex}">
                                <TabItem Width="50" Header="1" />
                                <TabItem Width="50" Header="2" />
                                <TabItem Width="50" Header="3" />
                                <TabItem Width="50" Header="4" />
                            </TabControl>
                            <!--  LED fine tuning  -->
                            <DockPanel DataContext="{Binding SelectedLED_VM}">
                                <ui:ToggleSwitch
                                    Content="Enable LED"
                                    DockPanel.Dock="Top"
                                    IsChecked="{Binding IsEnabled}" />
                                <ui:ToggleSwitch
                                    x:Name="UseLEDEffects_Checkbox"
                                    Content="Use advanced effects"
                                    DockPanel.Dock="Top"
                                    IsChecked="{Binding UseEffects}" />
                                <Grid DockPanel.Dock="Top" IsEnabled="{Binding IsChecked, ElementName=UseLEDEffects_Checkbox}">
                                    <Grid.RowDefinitions>
                                        <RowDefinition />
                                        <RowDefinition />
                                        <RowDefinition />
                                        <RowDefinition />
                                    </Grid.RowDefinitions>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition />
                                        <ColumnDefinition Width="3*" />
                                        <ColumnDefinition />
                                    </Grid.ColumnDefinitions>
                                    <TextBlock
                                        Grid.Row="0"
                                        Grid.Column="0"
                                        HorizontalAlignment="Left"
                                        VerticalAlignment="Center"
                                        Text="Duration:"
                                        TextWrapping="Wrap" />
                                    <Slider
                                        Grid.Row="0"
                                        Grid.Column="1"
                                        VerticalAlignment="Center"
                                        Maximum="255"
                                        Minimum="0"
                                        Value="{Binding Duration}" />
                                    <TextBlock
                                        Grid.Row="0"
                                        Grid.Column="2"
                                        Text="{Binding Duration}" />
                                    <TextBlock
                                        Grid.Row="1"
                                        Grid.Column="0"
                                        HorizontalAlignment="Left"
                                        VerticalAlignment="Center"
                                        Text="Interval duration:"
                                        TextWrapping="Wrap" />
                                    <Slider
                                        Grid.Row="1"
                                        Grid.Column="1"
                                        VerticalAlignment="Center"
                                        ClipToBounds="True"
                                        Maximum="255"
                                        Minimum="0"
                                        Value="{Binding IntervalDuration}" />
                                    <TextBlock
                                        Grid.Row="1"
                                        Grid.Column="2"
                                        Text="{Binding IntervalDuration}" />
                                    <TextBlock
                                        Grid.Row="2"
                                        Grid.Column="0"
                                        HorizontalAlignment="Left"
                                        VerticalAlignment="Center"
                                        Text="Interval ON portion:"
                                        TextWrapping="Wrap" />
                                    <ui:NumberBox
                                        Grid.Row="2"
                                        Grid.Column="1"
                                        VerticalAlignment="Center"
                                        ClipToBounds="True"
                                        Maximum="254"
                                        Minimum="0"
                                        Text="{Binding IntervalPortionON}"
                                        ToolTip="{Binding Value, RelativeSource={RelativeSource Self}}" />
                                    <TextBlock
                                        Grid.Row="2"
                                        Grid.Column="2"
                                        Text="{Binding IntervalPortionON}" />
                                    <TextBlock
                                        Grid.Row="3"
                                        Grid.Column="0"
                                        HorizontalAlignment="Left"
                                        VerticalAlignment="Center"
                                        Text="Interval OFF portion:"
                                        TextWrapping="Wrap" />
                                    <Slider
                                        Grid.Row="3"
                                        Grid.Column="1"
                                        VerticalAlignment="Center"
                                        ClipToBounds="True"
                                        Maximum="254"
                                        Minimum="0"
                                        Value="{Binding IntervalPortionOFF}" />
                                    <TextBlock
                                        Grid.Row="3"
                                        Grid.Column="2"
                                        Text="{Binding IntervalPortionOFF}" />
                                </Grid>
                            </DockPanel>
                        </StackPanel>
                    </TabItem>
                </TabControl>
            </Grid>
        </ContentControl>


    </DataTemplate>

    <!--  Basic wireless settings  -->
    <DataTemplate x:Key="Template_WirelessSettings">
        <DockPanel>
            <!--  Idle disconnect  -->
            <ui:ToggleSwitch
                x:Name="IdleDisconnectEnableCheckbox"
                Content="Disconnect the controller after idle period"
                DockPanel.Dock="Top"
                IsChecked="{Binding IsWirelessIdleDisconnectEnabled}" />
            <DockPanel DockPanel.Dock="Top">
                <Label
                    VerticalAlignment="Center"
                    Content="Idle disconnect period:"
                    DockPanel.Dock="Left" />
                <Slider
                    DockPanel.Dock="Right"
                    IsEnabled="{Binding IsChecked, ElementName=IdleDisconnectEnableCheckbox}"
                    IsSnapToTickEnabled="True"
                    Maximum="60"
                    Minimum="0"
                    TickFrequency="1"
                    Value="{Binding WirelessIdleDisconnectTime}" />
            </DockPanel>
            <ui:ToggleSwitch
                x:Name="EnableQuickDisconnectComboCheckbox"
                Content="Enable quick disconnect combo"
                DockPanel.Dock="Top"
                IsChecked="{Binding IsQuickDisconnectComboEnabled}" />
            <!--  Quick disconnect combo selection  -->
            <DockPanel DockPanel.Dock="Top" LastChildFill="False">
                <!--  DataContext="{Binding QuickDisconnectCombo}"  -->
                <Label
                    VerticalAlignment="Center"
                    Content="Quick disconnect combo (3s):"
                    DockPanel.Dock="Left" />
                <!--  Change ComboBox later so it's binding to a enum  -->
                <ComboBox
                    Width="80"
                    DockPanel.Dock="Left"
                    IsEnabled="{Binding IsChecked, ElementName=EnableQuickDisconnectComboCheckbox}"
                    ItemsSource="{Binding Source={wpf:EnumBindingSource {x:Type devmvvm:ControlApp_ComboButtons}}}"
                    SelectedItem="{Binding QuickDisconnectComboButton1}"
                    Text="{Binding QuickDisconnectComboButton1}" />
                <ComboBox
                    Width="80"
                    DockPanel.Dock="Left"
                    IsEnabled="{Binding IsChecked, ElementName=EnableQuickDisconnectComboCheckbox}"
                    ItemsSource="{Binding Source={wpf:EnumBindingSource {x:Type devmvvm:ControlApp_ComboButtons}}}"
                    SelectedItem="{Binding QuickDisconnectComboButton2}"
                    Text="{Binding QuickDisconnectComboButton2}" />
                <ComboBox
                    Width="80"
                    DockPanel.Dock="Left"
                    IsEnabled="{Binding IsChecked, ElementName=EnableQuickDisconnectComboCheckbox}"
                    ItemsSource="{Binding Source={wpf:EnumBindingSource {x:Type devmvvm:ControlApp_ComboButtons}}}"
                    SelectedItem="{Binding QuickDisconnectComboButton3}"
                    Text="{Binding QuickDisconnectComboButton3}" />
            </DockPanel>
        </DockPanel>
    </DataTemplate>

    <!--  Template draft  -->
    <DataTemplate x:Key="Template_ToDo">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition />
                <RowDefinition />
            </Grid.RowDefinitions>
            <Label
                Grid.Row="0"
                Grid.Column="0"
                VerticalAlignment="Center"
                Content="Fill 1" />
            <Label
                Grid.Row="1"
                Grid.Column="0"
                VerticalAlignment="Center"
                Content="Fill 2" />
        </Grid>
    </DataTemplate>

    <!--  Template: sticks deadzone  -->
    <DataTemplate x:Key="Template_SticksDeadZone">
        <DockPanel>
            <!--  Grid test  -->
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="4*" />
                    <ColumnDefinition Width="2*" />
                    <ColumnDefinition Width="2*" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition />
                    <RowDefinition />
                    <RowDefinition />
                    <RowDefinition />
                    <RowDefinition />
                </Grid.RowDefinitions>
                <!--  Row 0: Labels  -->
                <Label
                    Grid.Row="0"
                    Grid.Column="1"
                    HorizontalContentAlignment="Center"
                    VerticalContentAlignment="Center"
                    Content="Left Stick" />
                <Label
                    Grid.Row="0"
                    Grid.Column="2"
                    HorizontalContentAlignment="Center"
                    VerticalContentAlignment="Center"
                    Content="Right Stick" />
                <!--  Row 1: DeadZone  -->
                <Label
                    Grid.Row="1"
                    Grid.Column="0"
                    HorizontalContentAlignment="Left"
                    VerticalContentAlignment="Center"
                    Content="DeadZone (%):" />
                <ui:NumberBox
                    Grid.Row="1"
                    Grid.Column="1"
                    ClipToBounds="True"
                    Maximum="142"
                    Minimum="0"
                    Value="{Binding LeftStickDeadZone}" />
                <ui:NumberBox
                    Grid.Row="1"
                    Grid.Column="2"
                    ClipToBounds="True"
                    Maximum="142"
                    Minimum="0"
                    Value="{Binding RightStickDeadZone}" />
                <!--  Row 2: Invert X  -->
                <Label
                    Grid.Row="2"
                    Grid.Column="0"
                    HorizontalContentAlignment="Left"
                    VerticalContentAlignment="Center"
                    Content="Invert horizontally (X-Axis):" />
                <ui:ToggleSwitch
                    Grid.Row="2"
                    Grid.Column="1"
                    HorizontalAlignment="Center"
                    IsChecked="{Binding InvertLSX}" />
                <ui:ToggleSwitch
                    Grid.Row="2"
                    Grid.Column="2"
                    HorizontalAlignment="Center"
                    IsChecked="{Binding InvertRSX}" />
                <!--  Row 3: Invert Y  -->
                <Label
                    Grid.Row="3"
                    Grid.Column="0"
                    HorizontalContentAlignment="Left"
                    VerticalContentAlignment="Center"
                    Content="Invert vertically (Y-Axis):" />
                <ui:ToggleSwitch
                    Grid.Row="3"
                    Grid.Column="1"
                    HorizontalAlignment="Center"
                    IsChecked="{Binding InvertLSY}" />
                <ui:ToggleSwitch
                    Grid.Row="3"
                    Grid.Column="2"
                    HorizontalAlignment="Center"
                    IsChecked="{Binding InvertRSY}" />
            </Grid>
        </DockPanel>
    </DataTemplate>

    <!--  Rumble template  -->
    <DataTemplate x:Key="Template_RumbleBasicFunctions" DataType="devmvvm:GroupRumbleGeneralVM">
        <DockPanel>
            <ui:ToggleSwitch
                Content="Enable alternative mode"
                DockPanel.Dock="Top"
                IsChecked="{Binding IsAltModeEnabled}" />
            <DockPanel Visibility="{Binding IsAltModeEnabled, Converter={StaticResource BoolToVisConverter_TCollapsed_FVisible}}">
                <!--  Rumble motors disablers  -->
                <ui:ToggleSwitch
                    Content="Disable left motor (heavy)"
                    DockPanel.Dock="Top"
                    IsChecked="{Binding IsLeftMotorDisabled}" />
                <ui:ToggleSwitch
                    Content="Disable right motor (small)"
                    DockPanel.Dock="Top"
                    IsChecked="{Binding IsRightMotorDisabled}" />
            </DockPanel>
            <DockPanel Visibility="{Binding IsAltModeEnabled, Converter={StaticResource BoolToVis}}">
                <!--  Variable light rumble emulation enabler  -->
                <ui:ToggleSwitch DockPanel.Dock="Top" IsChecked="{Binding sss}">
                    <TextBlock Text="Start with variable right rumble emulation enabled" TextWrapping="Wrap" />
                </ui:ToggleSwitch>
                <ui:ToggleSwitch
                    x:Name="EnableQuickDisconnectComboCheckbox"
                    Content="Toggle variable right rumble emulation via button combo"
                    DockPanel.Dock="Top"
                    IsChecked="{Binding IsVariableRightEmulToggleComboEnabled}" />
                <DockPanel DockPanel.Dock="Top" LastChildFill="False">
                    <!--  DataContext="{Binding VariableRightEmulToggleCombo}"  -->
                    <Label
                        VerticalAlignment="Center"
                        Content="Toogle combo (3s):"
                        DockPanel.Dock="Left" />
                    <!--  Change ComboBox later so it's binding to a enum  -->
                    <ComboBox
                        Width="80"
                        DockPanel.Dock="Left"
                        IsEnabled="{Binding IsChecked, ElementName=EnableQuickDisconnectComboCheckbox}"
                        ItemsSource="{Binding Source={wpf:EnumBindingSource {x:Type devmvvm:ControlApp_ComboButtons}}}"
                        SelectedItem="{Binding VarRightEmul_ToggleComboButton1}"
                        Text="{Binding VarRightEmul_ToggleComboButton1}" />
                    <ComboBox
                        Width="80"
                        DockPanel.Dock="Left"
                        IsEnabled="{Binding IsChecked, ElementName=EnableQuickDisconnectComboCheckbox}"
                        ItemsSource="{Binding Source={wpf:EnumBindingSource {x:Type devmvvm:ControlApp_ComboButtons}}}"
                        SelectedItem="{Binding VarRightEmul_ToggleComboButton2}"
                        Text="{Binding VarRightEmul_ToggleComboButton2}" />
                    <ComboBox
                        Width="80"
                        DockPanel.Dock="Left"
                        IsEnabled="{Binding IsChecked, ElementName=EnableQuickDisconnectComboCheckbox}"
                        ItemsSource="{Binding Source={wpf:EnumBindingSource {x:Type devmvvm:ControlApp_ComboButtons}}}"
                        SelectedItem="{Binding VarRightEmul_ToggleComboButton3}"
                        Text="{Binding VarRightEmul_ToggleComboButton3}" />
                </DockPanel>
            </DockPanel>



        </DockPanel>
    </DataTemplate>

    <!--  Template: rumble heavy strength rescale  -->
    <DataTemplate x:Key="Template_RumbleHeavyStrRescale">
        <DockPanel>
            <!--  Left motor str rescaling ui:ToggleSwitch  -->
            <ui:ToggleSwitch
                Content="Enable rescaling of left motor strength"
                DockPanel.Dock="Top"
                IsChecked="{Binding IsLeftMotorStrRescalingEnabled}" />
            <!--  Upper range controls  -->
            <DockPanel DockPanel.Dock="Top">
                <TextBlock
                    HorizontalAlignment="Left"
                    VerticalAlignment="Center"
                    DockPanel.Dock="Left"
                    Text="New upper range:" />
                <Slider
                    DockPanel.Dock="Right"
                    IsSnapToTickEnabled="True"
                    Maximum="255"
                    Minimum="2"
                    TickFrequency="1"
                    Value="{Binding LeftMotorStrRescalingUpperRange}" />
            </DockPanel>
            <!--  lower range controls  -->
            <DockPanel DockPanel.Dock="Top">
                <TextBlock
                    HorizontalAlignment="Left"
                    VerticalAlignment="Center"
                    DockPanel.Dock="Left"
                    Text="New lower range:" />
                <Slider
                    DockPanel.Dock="Right"
                    IsSnapToTickEnabled="True"
                    Maximum="254"
                    Minimum="1"
                    TickFrequency="1"
                    Value="{Binding LeftMotorStrRescalingLowerRange}" />
            </DockPanel>
        </DockPanel>
    </DataTemplate>

    <!--  Template: variable light rumble emulation tuning  -->
    <DataTemplate x:Key="Template_RumbleVariableLightEmuTuning">
        <DockPanel>
            <!--  Conversion upper range  -->
            <DockPanel DockPanel.Dock="Top">
                <TextBlock
                    HorizontalAlignment="Left"
                    VerticalAlignment="Center"
                    DockPanel.Dock="Left"
                    Text="Conversion upper range:"
                    TextWrapping="Wrap" />
                <Slider
                    DockPanel.Dock="Right"
                    IsSnapToTickEnabled="True"
                    Maximum="255"
                    Minimum="2"
                    TickFrequency="1"
                    Value="{Binding RightRumbleConversionUpperRange}" />
            </DockPanel>
            <!--  Conversion lower range  -->
            <DockPanel DockPanel.Dock="Top">
                <TextBlock
                    HorizontalAlignment="Left"
                    VerticalAlignment="Center"
                    DockPanel.Dock="Left"
                    Text="Conversion lower range:"
                    TextWrapping="Wrap" />
                <Slider
                    DockPanel.Dock="Right"
                    IsSnapToTickEnabled="True"
                    Maximum="254"
                    Minimum="1"
                    TickFrequency="1"
                    Value="{Binding RightRumbleConversionLowerRange}" />
            </DockPanel>
            <TextBlock
                HorizontalAlignment="Left"
                VerticalAlignment="Center"
                DockPanel.Dock="Top"
                Text="Force activate right motor when above..."
                TextWrapping="Wrap" />
            <!--  Forced right motor activation / light rumble threshold  -->
            <DockPanel DockPanel.Dock="Top">
                <ui:ToggleSwitch
                    x:Name="ForcedRMLeftThresholdCheckbox"
                    Content="Left rumble threshold:"
                    DockPanel.Dock="Left"
                    IsChecked="{Binding IsForcedRightMotorHeavyThreasholdEnabled}" />
                <Slider
                    DockPanel.Dock="Right"
                    IsEnabled="{Binding IsChecked, ElementName=ForcedRMLeftThresholdCheckbox}"
                    IsSnapToTickEnabled="True"
                    Maximum="255"
                    Minimum="1"
                    TickFrequency="1"
                    Value="{Binding ForcedRightMotorHeavyThreshold}" />
            </DockPanel>
            <!--  Forced right motor activation / heavy rumble threshold  -->
            <DockPanel DockPanel.Dock="Top">
                <ui:ToggleSwitch
                    x:Name="ForcedRMRightThresholdCheckbox"
                    Content="Right rumble threshold:"
                    DockPanel.Dock="Left"
                    IsChecked="{Binding IsForcedRightMotorLightThresholdEnabled}" />
                <Slider
                    DockPanel.Dock="Right"
                    IsEnabled="{Binding IsChecked, ElementName=ForcedRMRightThresholdCheckbox}"
                    IsSnapToTickEnabled="True"
                    Maximum="255"
                    Minimum="1"
                    TickFrequency="1"
                    Value="{Binding ForcedRightMotorLightThreshold}" />
            </DockPanel>
            <DockPanel DockPanel.Dock="Top" />
        </DockPanel>
    </DataTemplate>

    <!--  Template: Mode_Unique_All  -->
    <DataTemplate x:Key="Template_Unique_All">
        <StackPanel>
            <DockPanel>
                <TextBlock
                    HorizontalAlignment="Left"
                    VerticalAlignment="Center"
                    DockPanel.Dock="Left"
                    Text="HID Device Mode:" />
                <ComboBox
                    VerticalAlignment="Center"
                    DockPanel.Dock="Right"
                    ItemsSource="{Binding HIDDeviceModesList}"
                    SelectedItem="{Binding Context, FallbackValue=4}" />
            </DockPanel>
            <DockPanel DockPanel.Dock="Top">
                <ui:ToggleSwitch
                    VerticalContentAlignment="Center"
                    Content="Allow apps to control LEDs (e.g.: RPCS3)"
                    DockPanel.Dock="Left"
                    IsChecked="{Binding AllowAppsToControlLEDsInSXSMode}"
                    Visibility="{Binding Path=Context, Converter={StaticResource VisibilityPerHIDModeConverterKey}, ConverterParameter=100}" />
                <ui:ToggleSwitch
                    VerticalContentAlignment="Center"
                    Content="Enable DS4 Lightbar Translation"
                    DockPanel.Dock="Right"
                    IsChecked="{Binding IsDS4LightbarTranslationEnabled}"
                    Visibility="{Binding Path=Context, Converter={StaticResource VisibilityPerHIDModeConverterKey}, ConverterParameter=1000}" />
            </DockPanel>
            <!--  Pressure buttons mode  -->
            <DockPanel Visibility="{Binding Path=Context, Converter={StaticResource VisibilityPerHIDModeConverterKey}, ConverterParameter=11}">
                <TextBlock
                    HorizontalAlignment="Left"
                    VerticalAlignment="Center"
                    DockPanel.Dock="Left"
                    Text="Pressure buttons mode:" />
                <ComboBox
                    VerticalAlignment="Center"
                    DockPanel.Dock="Right"
                    ItemsSource="{Binding ListOfPressureModes}"
                    SelectedItem="{Binding PressureExposureMode, FallbackValue=2}" />
            </DockPanel>
            <!--  DPAD modes  -->
            <DockPanel Visibility="{Binding Path=Context, Converter={StaticResource VisibilityPerHIDModeConverterKey}, ConverterParameter=11}">
                <TextBlock
                    HorizontalAlignment="Left"
                    VerticalAlignment="Center"
                    DockPanel.Dock="Left"
                    Text="Expose D-Pad as:" />
                <ComboBox
                    VerticalAlignment="Center"
                    DockPanel.Dock="Right"
                    ItemsSource="{Binding ListOfDPadModes}"
                    SelectedItem="{Binding DPadExposureMode, FallbackValue=0}" />
            </DockPanel>
        </StackPanel>
    </DataTemplate>

    <!--  Template: Output Rate Control  -->
    <DataTemplate x:Key="Template_OutputRateControl">
        <DockPanel>
            <!--  Output rate enabler  -->
            <ui:ToggleSwitch
                Content="Limit maximum output rate when wireless"
                DockPanel.Dock="Top"
                IsChecked="{Binding IsOutputReportRateControlEnabled}" />
            <!--  Max output rate adjuster  -->
            <DockPanel DockPanel.Dock="Top">
                <TextBlock
                    HorizontalAlignment="Left"
                    VerticalAlignment="Center"
                    DockPanel.Dock="Left"
                    Text="Max output rate:" />
                <Slider
                    DockPanel.Dock="Right"
                    IsSnapToTickEnabled="True"
                    Maximum="255"
                    Minimum="1"
                    TickFrequency="1"
                    Value="{Binding MaxOutputRate}" />
            </DockPanel>
            <!--  Output report detuplicator  -->
            <ui:ToggleSwitch
                Content="Enable output report deduplicator"
                DockPanel.Dock="Top"
                IsChecked="{Binding IsOutputReportDeduplicatorEnabled}" />
        </DockPanel>
    </DataTemplate>



</ResourceDictionary>
